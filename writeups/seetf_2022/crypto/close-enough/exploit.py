from Crypto.PublicKey import RSA
from Crypto.Util.number import *
from sympy import *

# Retrieved from https://facthacks.cr.yp.to/fermat.html
def fermatfactor(N):
    if N <= 0: return [N]
    if is_even(N): return [2,N/2]
    a = ceil(sqrt(N))
    while not is_square(a^2-N):
        a = a + 1
    b = sqrt(a^2-N)
    return [a - b,a + b]

pub = RSA.importKey(open("key", "rb").read(), passphrase=None)
e = pub.e
n = pub.n

c = 4881495507745813082308282986718149515999022572229780274224400469722585868147852608187509420010185039618775981404400401792885121498931245511345550975906095728230775307758109150488484338848321930294974674504775451613333664851564381516108124030753196722125755223318280818682830523620259537479611172718588812979116127220273108594966911232629219195957347063537672749158765130948724281974252007489981278474243333628204092770981850816536671234821284093955702677837464584916991535090769911997642606614464990834915992346639919961494157328623213393722370119570740146804362651976343633725091450303521253550650219753876236656017
p, q = fermatfactor(n)
d = inverse_mod(e, (p-1)*(q-1))
print(long_to_bytes(int(pow(c,d,n))))